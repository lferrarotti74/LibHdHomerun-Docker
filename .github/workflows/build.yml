name: Build release image

# Add permissions block
permissions:
  contents: write        # Required for updating variables
  packages: write        # Required for pushing to container registries
  actions: write         # Required for updating repository variables
  security-events: write # Required for uploading SARIF results to GitHub Security

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'information'
        type: choice
        options:
          - information
          - debug
          - warning
          - critical
      tags:
        description: 'Purpose of Run This Workflow?'
        required: true
        type: string
      force_build:
        description: 'Force build even if no base image updates'
        required: false
        default: false
        type: boolean
      update_digest:
        description: 'Update base image digests after manual build'
        required: false
        default: false
        type: boolean
  push:
    branches:
      - "main"
    paths-ignore:
      # Documentation files
      - '*.md'
      - 'docs/**'
      - '.github/**/*.md'
      
      # License and legal files
      - 'LICENSE*'
      - 'COPYING*'
      - 'COPYRIGHT*'
      
      # Git and GitHub specific files
      - '.gitignore'
      - '.gitattributes'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
      - '.github/dependabot.yml'
      - '.github/CODEOWNERS'
      
      # Editor and IDE files
      - '.vscode/**'
      - '.idea/**'
      - '*.swp'
      - '*.swo'
      - '*~'
      
      # Package manager files that don't affect builds
      - '.npmignore'
      - '.dockerignore'
      - '.eslintignore'
      - '.prettierignore'
      
      # CI/CD configuration for other systems
      - '.travis.yml'
      - '.circleci/**'
      - 'Jenkinsfile'
      - '.gitlab-ci.yml'
      
      # Common non-code files
      - '*.txt'
      - 'CHANGELOG*'
      - 'CONTRIBUTING*'
      - 'AUTHORS*'
      - 'MAINTAINERS*'

  pull_request:
    types: [opened, synchronize, reopened]
  # NEW: Schedule for checking Ubuntu updates
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/libhdhomerun-docker
  GHCR_IMAGE: ghcr.io/${{ github.repository_owner }}/libhdhomerun-docker

jobs:
  # NEW: Check if base image (Ubuntu) has been updated
  check-base-image:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check-image.outputs.should_build || steps.default.outputs.should_build }}
      update_reason: ${{ steps.check-image.outputs.update_reason || steps.default.outputs.update_reason }}
      ubuntu_digest: ${{ steps.check-image.outputs.digest || steps.default.outputs.digest }}
    steps:
      - name: Check Ubuntu updates
        id: check-image
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && (inputs.force_build == 'false' || inputs.update_digest == 'true'))
        run: |
          echo "🔍 Checking Ubuntu for updates..."
          
          # Get current digest from Docker Hub using a more reliable method
          echo "Pulling latest Ubuntu image info..."
          
          # Use docker manifest inspect instead of buildx imagetools
          NEW_DIGEST=$(docker manifest inspect ubuntu:24.04 | jq -r '.config.digest // .digest // empty')
          
          # Fallback method if the above doesn't work
          if [ -z "$NEW_DIGEST" ] || [ "$NEW_DIGEST" = "null" ]; then
            echo "Trying alternative digest retrieval method..."
            docker pull ubuntu:24.04 > /dev/null 2>&1
            NEW_DIGEST=$(docker image inspect ubuntu:24.04 --format '{{index .RepoDigests 0}}' | cut -d'@' -f2)
          fi
          
          # Final fallback using docker buildx but with better error handling
          if [ -z "$NEW_DIGEST" ] || [ "$NEW_DIGEST" = "null" ]; then
            echo "Using buildx imagetools as fallback..."
            set +e  # Don't exit on error
            INSPECT_OUTPUT=$(docker buildx imagetools inspect ubuntu:24.04 --format '{{json .}}' 2>/dev/null)
            if [ $? -eq 0 ]; then
              NEW_DIGEST=$(echo "$INSPECT_OUTPUT" | jq -r '.manifest.digest // .digest // empty')
            fi
            set -e  # Re-enable exit on error
          fi
          
          echo "Current Ubuntu digest: $NEW_DIGEST"
          
          # Validate digest format
          if [[ ! "$NEW_DIGEST" =~ ^sha256:[a-f0-9]{64}$ ]]; then
            echo "⚠️ Warning: Retrieved digest format seems invalid: $NEW_DIGEST"
            echo "Skipping build due to digest retrieval error."
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "update_reason=Failed to retrieve valid Ubuntu digest" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get stored digest from GitHub Variables
          STORED_DIGEST="${{ vars.UBUNTU_DIGEST }}"
          echo "Stored Ubuntu digest: $STORED_DIGEST"
          
          # Handle empty or missing stored digest
          if [ -z "$STORED_DIGEST" ] || [ "$STORED_DIGEST" = " " ] || [ "$STORED_DIGEST" = "sha256:initial" ]; then
            echo "🆕 No previous digest stored. This is the first run - build will proceed."
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "digest=$NEW_DIGEST" >> $GITHUB_OUTPUT
            echo "update_reason=First run - initializing Ubuntu digest tracking" >> $GITHUB_OUTPUT
          elif [ "$NEW_DIGEST" != "$STORED_DIGEST" ]; then
            echo "✅ Ubuntu has been updated! Build will proceed."
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "digest=$NEW_DIGEST" >> $GITHUB_OUTPUT
            echo "update_reason=Ubuntu base image updated (${STORED_DIGEST:0:12}... → ${NEW_DIGEST:0:12}...)" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No Ubuntu update detected. Skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "update_reason=No Ubuntu updates detected" >> $GITHUB_OUTPUT
          fi
      
      - name: Set default for non-scheduled runs
        id: default
        if: github.event_name != 'schedule' && (github.event_name != 'workflow_dispatch' || inputs.force_build == 'true')
        run: |
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "update_reason=Non-scheduled trigger" >> $GITHUB_OUTPUT
          echo "digest=" >> $GITHUB_OUTPUT

  print-tag:
    runs-on: ubuntu-latest
    # Only run if it's not a scheduled run, OR if it's scheduled and base image updated
    if: github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true'
    needs: [check-base-image]
    steps:
      - name: Print the purpose of run
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
            echo "Purpose of Run: ${{ needs.check-base-image.outputs.update_reason }}"
          else
            echo "Purpose of Run: ${{ inputs.tags || 'Code changes or manual trigger' }}"
          fi

  # Dummy SonarQube Analysis for Dependabot
  sonarqube-dummy:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    needs: [check-base-image]
    steps:
      - name: Skip SonarQube scan
        run: echo "Skipping SonarQube scan for Dependabot PRs"

  # SonarQube Analysis Job
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    if: >
      github.actor != 'dependabot[bot]' && (
        (github.event_name == 'push' || github.event_name == 'pull_request') ||
        (github.event_name == 'schedule' && needs.check-base-image.outputs.should_build == 'true')
      )
    needs: [check-base-image]
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.2.0
        with:
          fetch-depth: 0  # Required for proper blame/coverage tracking

      - name: Cache SonarQube packages
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Prepare SonarQube arguments
        id: sonar-args
        env:
          PR_HEAD_REF: ${{ github.head_ref }}
          PR_BASE_REF: ${{ github.base_ref }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "args=-Dsonar.projectKey=lferrarotti74_LibHdHomerun-Docker \
                  -Dsonar.organization=lferrarotti74 \
                  -Dsonar.pullrequest.key=$PR_NUMBER \
                  -Dsonar.pullrequest.branch=$PR_HEAD_REF \
                  -Dsonar.pullrequest.base=$PR_BASE_REF" >> $GITHUB_OUTPUT
          else
            echo "args=-Dsonar.projectKey=lferrarotti74_LibHdHomerun-Docker \
                  -Dsonar.organization=lferrarotti74 \
                  -Dsonar.branch.name=$REF_NAME" >> $GITHUB_OUTPUT
          fi

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@fd88b7d7ccbaefd23d8f36f73b59db7a3d246602 # v6.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ steps.sonar-args.outputs.args }}
        
  # Build images on x86 runner
  build-x86:
    runs-on: ubuntu-latest
    # Only run if it's not a scheduled run, OR if it's scheduled and base image updated
    if: github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true'
    needs: [check-base-image]
    strategy:
      matrix:
        platform:
          - linux/amd64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=edge,enable={{is_default_branch}}
            type=schedule,pattern={{date 'YYYYMMDD'}}
          flavor: |
            latest=false
            suffix=-${{ env.PLATFORM_PAIR }}

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Cache Docker layers
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.PLATFORM_PAIR }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.PLATFORM_PAIR }}-

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # This is a workaround to prevent cache size from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Debug DOCKER_METADATA_OUTPUT_JSON
        run: |
          echo "$DOCKER_METADATA_OUTPUT_JSON"
          
      - name: Export Digests
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          
      - name: Upload Digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  # Build images on ARM runner
  build-arm:
    runs-on: ubuntu-24.04-arm # ARM-specific runner
    # Only run if it's not a scheduled run, OR if it's scheduled and base image updated
    if: github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true'
    needs: [check-base-image]
    strategy:
      matrix:
        platform:
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=edge,enable={{is_default_branch}}
            type=schedule,pattern={{date 'YYYYMMDD'}}
          flavor: |
            latest=false
            suffix=-${{ env.PLATFORM_PAIR }}

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Cache Docker layers
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.PLATFORM_PAIR }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.PLATFORM_PAIR }}-

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true
          outputs: type=image,name=${{ env.GHCR_IMAGE }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # This is a workaround to prevent cache size from growing indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Debug DOCKER_METADATA_OUTPUT_JSON
        run: |
          echo "$DOCKER_METADATA_OUTPUT_JSON"
          
      - name: Export Digests
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          
      - name: Upload Digest
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: 
      - build-x86
      - build-arm
      - check-base-image
    if: github.event_name != 'pull_request' && (github.event_name != 'schedule' || needs.check-base-image.outputs.should_build == 'true')
    steps:
      - name: Download digests
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
          
      - name: List digests downloaded
        run: |
          echo "Digest files retrieved:"
          ls -l /tmp/digests
        
      - name: Log in to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            ${{ env.REGISTRY_IMAGE }}
            ${{ env.GHCR_IMAGE }}

      - name: Create manifest list and push to Docker Hub
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:latest \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          
          # Add special tag for base image updates
          if [ "${{ github.event_name }}" == "schedule" ]; then
            docker buildx imagetools create --tag ${{ env.REGISTRY_IMAGE }}:ubuntu-update-$(date +%Y-%m-%d) \
              $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          fi

      - name: Create manifest list and push to GHCR
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:latest \
            $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          
          # Add special tag for base image updates
          if [ "${{ github.event_name }}" == "schedule" ]; then
            docker buildx imagetools create --tag ${{ env.GHCR_IMAGE }}:ubuntu-update-$(date +%Y-%m-%d) \
              $(printf '${{ env.GHCR_IMAGE }}@sha256:%s ' *)
          fi

      - name: Inspect image
        run: |
          echo "Docker Hub images:"
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:latest
          echo "GHCR images:"
          docker buildx imagetools inspect ${{ env.GHCR_IMAGE }}:latest

  # Multi-tool Security Scanning
  security-scan:
    name: Security Scan (Trivy + Grype + OSV)
    runs-on: ubuntu-latest
    needs: [merge, build-x86, build-arm]
    if: always() && (needs.merge.result == 'success' || (needs.build-x86.result == 'success' && needs.build-arm.result == 'success'))
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v5.2.0
      
      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      ######################
      # Manual Trivy Setup
      ######################
      - name: Setup Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Cache Trivy DB
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}-${{ github.run_id }}
          restore-keys: |
            trivy-db-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}-
            trivy-db-${{ runner.os }}-

      ######################
      # Enhanced Trivy Scan
      ######################
      - name: Run Trivy vulnerability scanner
        run: |
          trivy image \
            --format table \
            --output trivy-report.txt \
            --severity CRITICAL,HIGH,MEDIUM \
            --exit-code 0 \
            --no-progress \
            --timeout 10m \
            ${{ env.REGISTRY_IMAGE }}:latest

      - name: Run Trivy SARIF scan for GitHub Security
        run: |
          trivy image \
            --format sarif \
            --output trivy-results.sarif \
            --severity CRITICAL,HIGH,MEDIUM \
            --exit-code 0 \
            --no-progress \
            --timeout 10m \
            ${{ env.REGISTRY_IMAGE }}:latest

      - name: Run Trivy secret scan
        run: |
          trivy image \
            --scanners secret \
            --format table \
            --output trivy-secrets.txt \
            --exit-code 0 \
            --no-progress \
            --timeout 5m \
            ${{ env.REGISTRY_IMAGE }}:latest

      ######################
      # Grype Scan
      ######################
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Grype vulnerability scanner
        run: |
          grype ${{ env.REGISTRY_IMAGE }}:latest -o json > grype-report.json || true
          grype ${{ env.REGISTRY_IMAGE }}:latest -o table > grype-report.txt || true

      ######################
      # OSV-Scanner for app dependencies
      ######################
      - name: Install Syft (SBOM generator)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate SBOM
        run: syft ${{ env.REGISTRY_IMAGE }}:latest -o json > sbom.json

      - name: Install OSV Scanner
        run: |
          curl -sSfL https://raw.githubusercontent.com/google/osv-scanner/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan SBOM with OSV
        run: osv-scanner sbom.json --output osv-report.json || true

      ######################
      # Upload SARIF to GitHub Security
      ######################
      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@e296a935590eb16afc0c0108289f68c87e2a89a5 # v4.30.7
        if: always()
        with:
          sarif_file: trivy-results.sarif
          category: trivy-container-scan

      ######################
      # Upload all scan reports
      ######################
      - name: Upload Security Scan Reports
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: security-reports
          path: |
            trivy-report.txt
            trivy-results.sarif
            trivy-secrets.txt
            grype-report.json
            grype-report.txt
            sbom.json
            osv-report.json
          retention-days: 30

  # NEW: Update stored Ubuntu digest after successful build
  # Updated update-digest job
  update-digest:
    runs-on: ubuntu-latest
    needs: [check-base-image, merge]
    permissions:
      contents: write  # Changed from 'read' to 'write'
      packages: write  # Keep existing
      actions: write   # Add this for variable updates
    if: >
      (github.event_name == 'schedule' || 
       (github.event_name == 'workflow_dispatch' && inputs.update_digest == 'true')) &&
      needs.merge.result == 'success'
    steps:
      - name: Update stored base image digests
        run: |
          update_digest() {
            local var_name="$1"
            local current_value="$2"
            local new_value="$3"
  
            if [ -n "$new_value" ] && [ "$new_value" != "$current_value" ]; then
              echo "📝 Updating $var_name..."
              echo "Previous: $current_value"
              echo "New: $new_value"

              # Use GitHub CLI API directly instead of gh variable set
              gh api \
                --method PATCH \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/actions/variables/$var_name" \
                -f "name=$var_name" \
                -f "value=$new_value"

              echo "✅ $var_name updated successfully!"
            else
              echo "ℹ️ $var_name unchanged."
            fi
          }
  
          update_digest "ALPINE_DIGEST" "${{ vars.ALPINE_DIGEST }}" "${{ needs.check-base-image.outputs.alpine_digest }}"
          update_digest "UBUNTU_DIGEST" "${{ vars.UBUNTU_DIGEST }}" "${{ needs.check-base-image.outputs.ubuntu_digest }}"
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

  # NEW: Build Summary
  build-summary:
    runs-on: ubuntu-latest
    needs: [check-base-image, build-x86, build-arm, merge, security-scan, update-digest]
    if: always()
    steps:
      - name: Download Security Reports
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v4
        with:
          name: security-reports
          path: ./security-reports
        continue-on-error: true
      
      - name: Generate Security Summary
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # Enhanced Trivy parsing with SARIF support and improved accuracy
          if [ -f "./security-reports/trivy-results.sarif" ]; then
            # Use SARIF for more accurate parsing (prioritized)
            CRITICAL=$(jq -r '.runs[].results[] | select(.level == "error" and (.ruleId | contains("CVE"))) | .ruleId' ./security-reports/trivy-results.sarif 2>/dev/null | wc -l || echo "0")
            HIGH=$(jq -r '.runs[].results[] | select(.level == "warning" and (.ruleId | contains("CVE"))) | .ruleId' ./security-reports/trivy-results.sarif 2>/dev/null | wc -l || echo "0")
            MEDIUM=$(jq -r '.runs[].results[] | select(.level == "note" and (.ruleId | contains("CVE"))) | .ruleId' ./security-reports/trivy-results.sarif 2>/dev/null | wc -l || echo "0")
            LOW=$(jq -r '.runs[].results[] | select(.level == "info" and (.ruleId | contains("CVE"))) | .ruleId' ./security-reports/trivy-results.sarif 2>/dev/null | wc -l || echo "0")
          elif [ -f "./security-reports/trivy-report.txt" ]; then
            # Fallback to text parsing with improved accuracy
            CRITICAL=$(grep -E "CVE-[0-9]{4}-[0-9]+.*CRITICAL" ./security-reports/trivy-report.txt | wc -l || echo "0")
            HIGH=$(grep -E "CVE-[0-9]{4}-[0-9]+.*HIGH" ./security-reports/trivy-report.txt | wc -l || echo "0")
            MEDIUM=$(grep -E "CVE-[0-9]{4}-[0-9]+.*MEDIUM" ./security-reports/trivy-report.txt | wc -l || echo "0")
            LOW=$(grep -E "CVE-[0-9]{4}-[0-9]+.*LOW" ./security-reports/trivy-report.txt | wc -l || echo "0")
          else
            CRITICAL=0; HIGH=0; MEDIUM=0; LOW=0
          fi
          
          # Parse Trivy secrets report (enhanced - use dedicated secrets file)
          if [ -f "./security-reports/trivy-secrets.txt" ]; then
            SECRET_FINDINGS=$(grep -E "(SECRET|API_KEY|PASSWORD|TOKEN)" ./security-reports/trivy-secrets.txt | wc -l || echo "0")
          else
            SECRET_FINDINGS=0
          fi
          
          # Parse Grype report for additional CVEs
          if [ -f "./security-reports/grype-report.json" ]; then
            GRYPE_CRITICAL=$(jq -r '.matches[] | select(.vulnerability.severity == "Critical") | .vulnerability.id' ./security-reports/grype-report.json 2>/dev/null | wc -l || echo "0")
            GRYPE_HIGH=$(jq -r '.matches[] | select(.vulnerability.severity == "High") | .vulnerability.id' ./security-reports/grype-report.json 2>/dev/null | wc -l || echo "0")
            GRYPE_MEDIUM=$(jq -r '.matches[] | select(.vulnerability.severity == "Medium") | .vulnerability.id' ./security-reports/grype-report.json 2>/dev/null | wc -l || echo "0")
            GRYPE_LOW=$(jq -r '.matches[] | select(.vulnerability.severity == "Low") | .vulnerability.id' ./security-reports/grype-report.json 2>/dev/null | wc -l || echo "0")
          else
            GRYPE_CRITICAL=0; GRYPE_HIGH=0; GRYPE_MEDIUM=0; GRYPE_LOW=0
          fi
          
          # Parse OSV report
          if [ -f "./security-reports/osv-report.json" ]; then
            OSV_VULNS=$(jq -r '.results[].packages[].vulnerabilities[]?.id' ./security-reports/osv-report.json 2>/dev/null | wc -l || echo "0")
          else
            OSV_VULNS=0
          fi
          
          # Calculate totals
          TOTAL_CRITICAL=$((CRITICAL + GRYPE_CRITICAL))
          TOTAL_HIGH=$((HIGH + GRYPE_HIGH))
          TOTAL_MEDIUM=$((MEDIUM + GRYPE_MEDIUM))
          TOTAL_LOW=$((LOW + GRYPE_LOW))
          TOTAL_VULNS=$((TOTAL_CRITICAL + TOTAL_HIGH + TOTAL_MEDIUM + TOTAL_LOW + OSV_VULNS))
          
          # Enhanced security status with secret priority
          if [ $SECRET_FINDINGS -gt 0 ]; then
            STATUS="🟡 **SECRETS FOUND - ACTION REQUIRED**"
          elif [ $TOTAL_CRITICAL -gt 0 ]; then
            STATUS="🔴 **CRITICAL VULNERABILITIES FOUND**"
          elif [ $TOTAL_HIGH -gt 0 ]; then
            STATUS="🟠 **HIGH VULNERABILITIES FOUND**"
          elif [ $TOTAL_MEDIUM -gt 0 ]; then
            STATUS="🟡 **MEDIUM VULNERABILITIES FOUND**"
          elif [ $TOTAL_LOW -gt 0 ]; then
            STATUS="🟢 **LOW VULNERABILITIES FOUND**"
          else
            STATUS="✅ **NO VULNERABILITIES FOUND**"
          fi
          
          echo "### $STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Vulnerability Summary Table
          echo "#### 🛡️ Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Severity | Trivy | Grype | Total |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔴 Critical | $CRITICAL | $GRYPE_CRITICAL | $TOTAL_CRITICAL |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟠 High | $HIGH | $GRYPE_HIGH | $TOTAL_HIGH |" >> $GITHUB_STEP_SUMMARY
          echo "| 🟡 Medium | $MEDIUM | $GRYPE_MEDIUM | $TOTAL_MEDIUM |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔵 Low | $LOW | $GRYPE_LOW | $TOTAL_LOW |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 **Total** | **$((CRITICAL + HIGH + MEDIUM + LOW))** | **$((GRYPE_CRITICAL + GRYPE_HIGH + GRYPE_MEDIUM + GRYPE_LOW))** | **$((TOTAL_CRITICAL + TOTAL_HIGH + TOTAL_MEDIUM + TOTAL_LOW))** |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Secret Scanning Results
          echo "#### 🔐 Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          if [ $SECRET_FINDINGS -gt 0 ]; then
            echo "⚠️ **$SECRET_FINDINGS secret(s) detected** - Review and remediate immediately!" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No secrets detected in the container image" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**OSV Scanner**: $OSV_VULNS dependency vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Enhanced Scan Details
          echo "#### 📋 Scan Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Enhanced Trivy (v0.67.0)**: Container and filesystem vulnerability + secret scanner" >> $GITHUB_STEP_SUMMARY
          echo "- **Grype**: Container image vulnerability scanner" >> $GITHUB_STEP_SUMMARY
          echo "- **OSV Scanner**: Open Source Vulnerability scanner" >> $GITHUB_STEP_SUMMARY
          echo "- **Syft**: Software Bill of Materials (SBOM) generator" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Retention**: 30 days" >> $GITHUB_STEP_SUMMARY
          echo "- **Output Formats**: Table, SARIF, JSON" >> $GITHUB_STEP_SUMMARY
          echo "- **SARIF Upload**: Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: Manual setup with caching enabled" >> $GITHUB_STEP_SUMMARY
      
      - name: Generate Build Summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "schedule" ]; then
            if [ "${{ needs.check-base-image.outputs.should_build }}" == "true" ]; then
              echo "**Status:** ✅ Ubuntu updated - Build completed" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** ${{ needs.check-base-image.outputs.update_reason }}" >> $GITHUB_STEP_SUMMARY
              echo "**New Ubuntu Digest:** \`${{ needs.check-base-image.outputs.ubuntu_digest }}\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** ⏭️ No updates detected - Build skipped" >> $GITHUB_STEP_SUMMARY
              echo "**Reason:** Ubuntu digest unchanged" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "**Status:** ✅ Build completed" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** Code changes or manual trigger" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Images Built:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.GHCR_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-x86.result }}" == "success" ] && [ "${{ needs.build-arm.result }}" == "success" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎯 **Multi-arch build successful** for platforms:" >> $GITHUB_STEP_SUMMARY
            echo "- linux/amd64 (native x86 runner), linux/arm64 (native ARM runner)" >> $GITHUB_STEP_SUMMARY
          fi
